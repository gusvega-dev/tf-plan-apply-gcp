name: Publish Containerized GitHub Action to GHCR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/gusvega-dev/tf-plan-apply-gcp
  VERSION: 'v1.0.0'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write  # Required for pushing to GHCR
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Delete Existing Version (if exists)
        run: |
          echo "üîç Fetching existing package versions..."

          # Fetch package versions safely
          VERSIONS_JSON=$(gh api \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/packages/container/tf-plan-apply-gcp/versions 2>/dev/null || echo "error")

          # Ensure valid JSON response
          if [[ "$VERSIONS_JSON" == "error" || -z "$VERSIONS_JSON" ]]; then
            echo "‚ö†Ô∏è No package versions found or failed to retrieve package information."
            exit 0  # Don't fail workflow if package doesn't exist
          fi

          # Extract all version IDs
          VERSION_ID=$(echo "$VERSIONS_JSON" | jq -r '
            if type=="array" then 
              .[] | select(.metadata.container.tags[]? | contains("'"$VERSION"'")) | .id 
            else 
              empty 
            end')

          # Get total number of package versions
          VERSION_COUNT=$(echo "$VERSIONS_JSON" | jq 'length')

          if [[ -n "$VERSION_ID" ]]; then
            if [[ "$VERSION_COUNT" -gt 1 ]]; then
              echo "üóëÔ∏è Deleting old version $VERSION (ID: $VERSION_ID)..."
              gh api --method DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                https://api.github.com/user/packages/container/tf-plan-apply-gcp/versions/$VERSION_ID || \
                echo "‚ö†Ô∏è Warning: Failed to delete version but continuing..."
            else
              echo "‚ö†Ô∏è Cannot delete the last tagged version ($VERSION). Consider deleting the entire package instead."
            fi
          else
            echo "‚úÖ No existing version found for $VERSION."
          fi

          echo "üöÄ Proceeding with the rest of the workflow..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Build and Tag Docker Image
        run: |
          docker build -t $IMAGE_NAME:$VERSION .

      - name: Push Docker Image to GHCR
        run: |
          docker push $IMAGE_NAME:$VERSION

      - name: Create and Push GitHub Tag
        run: |
          git tag -f $VERSION
          git push origin -f $VERSION
